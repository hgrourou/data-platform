# ===============================
# = MULTIPART FILE UPLOAD
# ===============================

# Set the file size limit (default 1Mb). If you want to specify that files be
# unlimited set the multipart.maxFileSize property to -1.
multipart.max-file-size = 3Mb

# Set the total request size for a multipart/form-data (default 10Mb)
multipart.max-request-size = 20Mb

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "mode"
spring.datasource.url = jdbc:mysql://localhost:3306/modev4?useSSL=false&useUnicode=true\
  &characterEncoding=utf-8

# Username and password
spring.datasource.username = root
spring.datasource.password = root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.max-active = 5

# Validate the connection before borrowing it from the pool.
spring.datasource.test-on-borrow = true

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.test-while-idle = true
spring.datasource.validation-query = SELECT 1
spring.datasource.time-between-eviction-runs-millis = 60000



# Connection url for the database "mode"
spring.datasource2.url = jdbc:mysql://localhost:3306/mode_bi?useSSL=false&useUnicode=true\
  &characterEncoding=utf-8
# Username and password
spring.datasource2.username = root
spring.datasource2.password = root
spring.datasource2.driver-class-name=com.mysql.jdbc.Driver

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource2.max-active = 5

# Validate the connection before borrowing it from the pool.
spring.datasource2.test-on-borrow = true

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource2.test-while-idle = true
spring.datasource2.validation-query = SELECT 1
spring.datasource2.time-between-eviction-runs-millis = 60000


# ===============================
# = LOGGING
# ===============================

# A repository request of level p in a logger with level q is enabled if p >= q. This rule is at the
# heart of log4j. It assumes that levels are ordered. For the standard levels, we have
# ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF.
logging.level.org.springframework = INFO
logging.level.com.mode = INFO
